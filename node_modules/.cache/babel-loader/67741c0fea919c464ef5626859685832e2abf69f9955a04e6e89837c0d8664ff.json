{"ast":null,"code":"import { CONFIG } from '../config.ts';\nexport class Bullet {\n  constructor(x, y, angle, speed, color, size, isPlayer, damage, type) {\n    this.x = void 0;\n    this.y = void 0;\n    this.vx = void 0;\n    this.vy = void 0;\n    this.spawnTime = void 0;\n    this.bounces = void 0;\n    this.speed = void 0;\n    this.color = void 0;\n    this.size = void 0;\n    this.isPlayer = void 0;\n    this.damage = void 0;\n    this.type = void 0;\n    this.lastUpdateTime = void 0;\n    this.x = x;\n    this.y = y;\n    this.speed = speed;\n    this.color = color;\n    this.vx = Math.cos(angle) * this.speed;\n    this.vy = Math.sin(angle) * this.speed;\n    this.spawnTime = Date.now();\n    this.bounces = 0;\n    this.size = size;\n    this.isPlayer = isPlayer;\n    this.damage = damage;\n    this.type = type;\n    this.lastUpdateTime = performance.now();\n  }\n  draw(ctx) {\n    if (this.type === \"fire\") {\n      ctx.shadowBlur = 10 + Math.sin(performance.now() / 100) * 5;\n      ctx.shadowColor = \"rgba(255, 100, 0, 0.8)\";\n      const gradient = ctx.createRadialGradient(this.x, this.y, this.size * 0.2, this.x, this.y, this.size);\n      gradient.addColorStop(0, \"yellow\");\n      gradient.addColorStop(0.5, \"orange\");\n      gradient.addColorStop(1, \"red\");\n      ctx.fillStyle = gradient;\n    } else {\n      ctx.fillStyle = this.color;\n    }\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size + (this.type === \"fire\" ? Math.sin(performance.now() / 100) * 2 : 0), 0, Math.PI * 2);\n    ctx.fill();\n    ctx.shadowBlur = 0;\n  }\n  update() {\n    const now = performance.now();\n    this.lastUpdateTime = now;\n    const prevX = this.x;\n    const prevY = this.y;\n    this.x += this.vx;\n    this.y += this.vy;\n    this.checkWallCollision(prevX, prevY);\n  }\n  checkWallCollision(prevX, prevY) {\n    if (this.bounces >= CONFIG.MAX_BOUNCES) return;\n    const nextCellX = Math.floor(this.x / CONFIG.CELL_SIZE);\n    const nextCellY = Math.floor(this.y / CONFIG.CELL_SIZE);\n    const prevCellX = Math.floor(prevX / CONFIG.CELL_SIZE);\n    const prevCellY = Math.floor(prevY / CONFIG.CELL_SIZE);\n    if (nextCellX < 0 || nextCellY < 0 || nextCellY >= CONFIG.MAP.length || nextCellX >= CONFIG.MAP[0].length) {\n      return;\n    }\n    if (CONFIG.MAP[nextCellY][nextCellX] === 1) {\n      const hitVertical = nextCellX !== prevCellX;\n      const hitHorizontal = nextCellY !== prevCellY;\n      if (hitVertical) this.vx *= -1;\n      if (hitHorizontal) this.vy *= -1;\n      this.bounces++;\n      this.x = prevX - this.vx;\n      this.y = prevY - this.vy;\n    }\n  }\n  get isExpired() {\n    return Date.now() - this.spawnTime > CONFIG.BULLET_LIFETIME || this.bounces > CONFIG.MAX_BOUNCES;\n  }\n}","map":{"version":3,"names":["CONFIG","Bullet","constructor","x","y","angle","speed","color","size","isPlayer","damage","type","vx","vy","spawnTime","bounces","lastUpdateTime","Math","cos","sin","Date","now","performance","draw","ctx","shadowBlur","shadowColor","gradient","createRadialGradient","addColorStop","fillStyle","beginPath","arc","PI","fill","update","prevX","prevY","checkWallCollision","MAX_BOUNCES","nextCellX","floor","CELL_SIZE","nextCellY","prevCellX","prevCellY","MAP","length","hitVertical","hitHorizontal","isExpired","BULLET_LIFETIME"],"sources":["/home/nick/Desktop/Monagaynanimas/src/game/classes/Bullet.ts"],"sourcesContent":["import { CONFIG } from '../config.ts';\n\nexport class Bullet {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  spawnTime: number;\n  bounces: number;\n  speed: number;\n  color: string;\n  size: number; \n  isPlayer: boolean;\n  damage: number;\n  type: string;\n  lastUpdateTime: number;\n  \n  constructor(x: number, y: number, angle: number, speed: number, color: string, size: number, isPlayer: boolean, damage: number, type: string) {\n    this.x = x;\n    this.y = y;\n    this.speed = speed;\n    this.color = color;\n    this.vx = Math.cos(angle) * this.speed;\n    this.vy = Math.sin(angle) * this.speed;\n    this.spawnTime = Date.now();\n    this.bounces = 0;\n    this.size = size;\n    this.isPlayer = isPlayer; \n    this.damage = damage;\n    this.type = type;\n    this.lastUpdateTime = performance.now();\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (this.type === \"fire\") {\n        ctx.shadowBlur = 10 + Math.sin(performance.now() / 100) * 5;\n        ctx.shadowColor = \"rgba(255, 100, 0, 0.8)\";\n\n        const gradient = ctx.createRadialGradient(this.x, this.y, this.size * 0.2, this.x, this.y, this.size);\n        gradient.addColorStop(0, \"yellow\");\n        gradient.addColorStop(0.5, \"orange\");\n        gradient.addColorStop(1, \"red\");\n\n        ctx.fillStyle = gradient;\n    } else {\n        ctx.fillStyle = this.color;\n    }\n\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size + (this.type === \"fire\" ? Math.sin(performance.now() / 100) * 2 : 0), 0, Math.PI * 2);\n    ctx.fill();\n\n    ctx.shadowBlur = 0;\n  }\n\n  update() {\n    const now = performance.now();\n    this.lastUpdateTime = now;\n    \n    const prevX = this.x;\n    const prevY = this.y;\n\n    this.x += this.vx;\n    this.y += this.vy;\n\n    this.checkWallCollision(prevX, prevY);\n  }\n\n  private checkWallCollision(prevX: number, prevY: number) {\n    if (this.bounces >= CONFIG.MAX_BOUNCES) return;\n\n    const nextCellX = Math.floor(this.x / CONFIG.CELL_SIZE);\n    const nextCellY = Math.floor(this.y / CONFIG.CELL_SIZE);\n    const prevCellX = Math.floor(prevX / CONFIG.CELL_SIZE);\n    const prevCellY = Math.floor(prevY / CONFIG.CELL_SIZE);\n\n    if (nextCellX < 0 || nextCellY < 0 || \n        nextCellY >= CONFIG.MAP.length || \n        nextCellX >= CONFIG.MAP[0].length) {\n      return;\n    }\n\n    if (CONFIG.MAP[nextCellY][nextCellX] === 1) {\n        const hitVertical = nextCellX !== prevCellX;\n        const hitHorizontal = nextCellY !== prevCellY;\n\n        if (hitVertical) this.vx *= -1;\n        if (hitHorizontal) this.vy *= -1;\n\n        this.bounces++;\n        this.x = prevX - this.vx;\n        this.y = prevY - this.vy;\n    }\n  }\n\n  get isExpired() {\n    return Date.now() - this.spawnTime > CONFIG.BULLET_LIFETIME || \n      this.bounces > CONFIG.MAX_BOUNCES;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}