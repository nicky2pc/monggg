{"ast":null,"code":"var _jsxFileName = \"/home/nick/Desktop/Monagaynanimas_Neynar/src/providers/FrameMultiplierProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrameMultiplierContext = /*#__PURE__*/createContext(1);\nconst measureFrameRate = () => {\n  return new Promise(resolve => {\n    let frames = 0;\n    const startTime = performance.now();\n    const countFrames = () => {\n      frames++;\n      if (performance.now() - startTime < 1000) {\n        requestAnimationFrame(countFrames);\n      } else {\n        resolve(frames);\n      }\n    };\n    requestAnimationFrame(countFrames);\n  });\n};\nexport const FrameMultiplierProvider = ({\n  children\n}) => {\n  _s();\n  const [frameMultiplier, setFrameMultiplier] = useState(1);\n  useEffect(() => {\n    const calculateMultiplier = async () => {\n      //speeding up the game based on the refresh rate\n      await new Promise(res => setTimeout(res, 800));\n      const refreshRate = await measureFrameRate();\n      let multiplier = refreshRate >= 65 ? 1 : 1.5;\n      setFrameMultiplier(multiplier);\n      console.log(\"Refresh rate: \", refreshRate);\n      console.log(\"Frame multiplier: \", multiplier);\n    };\n    calculateMultiplier();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(FrameMultiplierContext.Provider, {\n    value: frameMultiplier,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(FrameMultiplierProvider, \"um8o2B5tNd3UueY85DvGJTWm2nk=\");\n_c = FrameMultiplierProvider;\nexport const useFrameMultiplier = () => {\n  _s2();\n  return useContext(FrameMultiplierContext);\n};\n_s2(useFrameMultiplier, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"FrameMultiplierProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","FrameMultiplierContext","measureFrameRate","Promise","resolve","frames","startTime","performance","now","countFrames","requestAnimationFrame","FrameMultiplierProvider","children","_s","frameMultiplier","setFrameMultiplier","calculateMultiplier","res","setTimeout","refreshRate","multiplier","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFrameMultiplier","_s2","$RefreshReg$"],"sources":["/home/nick/Desktop/Monagaynanimas_Neynar/src/providers/FrameMultiplierProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nconst FrameMultiplierContext = createContext<number>(1);\r\n\r\nconst measureFrameRate = () => {\r\n  return new Promise<number>((resolve) => {\r\n    let frames = 0;\r\n    const startTime = performance.now();\r\n\r\n    const countFrames = () => {\r\n      frames++;\r\n      if (performance.now() - startTime < 1000) {\r\n        requestAnimationFrame(countFrames);\r\n      } else {\r\n        resolve(frames);\r\n      }\r\n    };\r\n\r\n    requestAnimationFrame(countFrames);\r\n  });\r\n};\r\n\r\nexport const FrameMultiplierProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [frameMultiplier, setFrameMultiplier] = useState<number>(1);\r\n\r\n  useEffect(() => {\r\n    const calculateMultiplier = async () => {\r\n      //speeding up the game based on the refresh rate\r\n      await new Promise((res) => setTimeout(res, 800));\r\n      const refreshRate = await measureFrameRate();\r\n      let multiplier = refreshRate >= 65 ? 1 : 1.5;\r\n      setFrameMultiplier(multiplier);\r\n      console.log(\"Refresh rate: \", refreshRate);\r\n      console.log(\"Frame multiplier: \", multiplier);\r\n    };\r\n\r\n    calculateMultiplier();\r\n  }, []);\r\n\r\n  return (\r\n    <FrameMultiplierContext.Provider value={frameMultiplier}>\r\n      {children}\r\n    </FrameMultiplierContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useFrameMultiplier = () => {\r\n  return useContext(FrameMultiplierContext);\r\n};\r\n\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,sBAAsB,gBAAGN,aAAa,CAAS,CAAC,CAAC;AAEvD,MAAMO,gBAAgB,GAAGA,CAAA,KAAM;EAC7B,OAAO,IAAIC,OAAO,CAAUC,OAAO,IAAK;IACtC,IAAIC,MAAM,GAAG,CAAC;IACd,MAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;IAEnC,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxBJ,MAAM,EAAE;MACR,IAAIE,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,GAAG,IAAI,EAAE;QACxCI,qBAAqB,CAACD,WAAW,CAAC;MACpC,CAAC,MAAM;QACLL,OAAO,CAACC,MAAM,CAAC;MACjB;IACF,CAAC;IAEDK,qBAAqB,CAACD,WAAW,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,uBAAgE,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChG,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAS,CAAC,CAAC;EAEjED,SAAS,CAAC,MAAM;IACd,MAAMmB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC;MACA,MAAM,IAAIb,OAAO,CAAEc,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,CAAC;MAChD,MAAME,WAAW,GAAG,MAAMjB,gBAAgB,CAAC,CAAC;MAC5C,IAAIkB,UAAU,GAAGD,WAAW,IAAI,EAAE,GAAG,CAAC,GAAG,GAAG;MAC5CJ,kBAAkB,CAACK,UAAU,CAAC;MAC9BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,WAAW,CAAC;MAC1CE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,UAAU,CAAC;IAC/C,CAAC;IAEDJ,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA,CAACC,sBAAsB,CAACsB,QAAQ;IAACC,KAAK,EAAEV,eAAgB;IAAAF,QAAA,EACrDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACsB,CAAC;AAEtC,CAAC;AAACf,EAAA,CAtBWF,uBAAgE;AAAAkB,EAAA,GAAhElB,uBAAgE;AAwB7E,OAAO,MAAMmB,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACtC,OAAOnC,UAAU,CAACK,sBAAsB,CAAC;AAC3C,CAAC;AAAC8B,GAAA,CAFWD,kBAAkB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}