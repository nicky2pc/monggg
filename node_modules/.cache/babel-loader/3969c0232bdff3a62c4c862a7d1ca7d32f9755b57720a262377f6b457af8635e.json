{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { CONFIG } from '../game/config.ts';\nexport const useTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState(() => {\n    const savedTransactions = localStorage.getItem(\"transactions\");\n    if (!savedTransactions) return [];\n    let parsedTransactions = JSON.parse(savedTransactions);\n    parsedTransactions = parsedTransactions.map(tx => !tx.link || tx.link === \"Pending...\" ? {\n      ...tx,\n      link: \"Not processed\"\n    } : tx);\n    localStorage.setItem(\"transactions\", JSON.stringify(parsedTransactions));\n    return parsedTransactions;\n  });\n  useEffect(() => {\n    localStorage.setItem(\"transactions\", JSON.stringify(transactions));\n  }, [transactions]);\n  const updateTransactions = (transaction, callback) => {\n    const {\n      id,\n      type\n    } = transaction;\n    setTransactions(prev => {\n      const updated = [transaction, ...prev];\n      if (updated.length > CONFIG.MAX_TRANSACTIONS) {\n        updated.length = CONFIG.MAX_TRANSACTIONS;\n      }\n      localStorage.setItem(\"transactions\", JSON.stringify(updated));\n      return updated;\n    });\n    callback().then(data => {\n      setTransactions(prev => {\n        const updatedTransactions = prev.map(tx => tx.id === id && tx.type === type ? {\n          ...tx,\n          link: (data === null || data === void 0 ? void 0 : data.url) || \"Error\",\n          date: Date.now()\n        } : tx);\n        localStorage.setItem(\"transactions\", JSON.stringify(updatedTransactions));\n        return updatedTransactions;\n      });\n    }).catch(() => {\n      setTransactions(prev => {\n        const updatedTransactions = prev.map(tx => tx.id === id && tx.type === type ? {\n          ...tx,\n          link: \"Error\",\n          date: Date.now()\n        } : tx);\n        localStorage.setItem(\"transactions\", JSON.stringify(updatedTransactions));\n        return updatedTransactions;\n      });\n    });\n  };\n  const handleMint = killCount => {\n    const transaction = {\n      id: Date.now(),\n      type: `Mint: ${killCount}`,\n      link: \"Pending...\",\n      date: Date.now()\n    };\n    updateTransactions(transaction, () => import('../game/utils.ts').then(m => m.mint()));\n  };\n  const handleTotalScore = (score, isDead = false) => {\n    const transaction = {\n      id: Date.now(),\n      type: isDead ? `Death: ${score}` : `Kill: ${score}`,\n      link: \"Pending...\",\n      date: Date.now()\n    };\n    updateTransactions(transaction, () => import('../game/utils.ts').then(m => m.sendTransaction(score, isDead)));\n  };\n  return {\n    transactions,\n    handleMint,\n    handleTotalScore\n  };\n};\n_s(useTransactions, \"yILnzyWAAAc9qiMZ7Een5BjagJo=\");","map":{"version":3,"names":["useState","useEffect","CONFIG","useTransactions","_s","transactions","setTransactions","savedTransactions","localStorage","getItem","parsedTransactions","JSON","parse","map","tx","link","setItem","stringify","updateTransactions","transaction","callback","id","type","prev","updated","length","MAX_TRANSACTIONS","then","data","updatedTransactions","url","date","Date","now","catch","handleMint","killCount","m","mint","handleTotalScore","score","isDead","sendTransaction"],"sources":["/home/nick/Desktop/Monagaynanimas_Neynar/src/hooks/useTransactions.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { CONFIG } from '../game/config.ts';\r\nimport { Transaction, UseTransactionsReturn, UpdateTransactionCallback, LeaderboardResponse } from '../types.ts';\r\n\r\nexport const useTransactions = (): UseTransactionsReturn => {\r\n  const [transactions, setTransactions] = useState<Transaction[]>(() => {\r\n    const savedTransactions = localStorage.getItem(\"transactions\");\r\n    if (!savedTransactions) return [];\r\n  \r\n    let parsedTransactions = JSON.parse(savedTransactions);\r\n  \r\n    parsedTransactions = parsedTransactions.map(tx => \r\n      (!tx.link || tx.link === \"Pending...\") ? { ...tx, link: \"Not processed\" } : tx\r\n    );\r\n  \r\n    localStorage.setItem(\"transactions\", JSON.stringify(parsedTransactions));\r\n    return parsedTransactions;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"transactions\", JSON.stringify(transactions));\r\n  }, [transactions]);\r\n\r\n  const updateTransactions = (transaction: Transaction, callback: UpdateTransactionCallback) => {\r\n    const { id, type } = transaction;\r\n    \r\n    setTransactions(prev => {\r\n      const updated = [transaction, ...prev];\r\n      if (updated.length > CONFIG.MAX_TRANSACTIONS) {\r\n        updated.length = CONFIG.MAX_TRANSACTIONS;\r\n      }\r\n      localStorage.setItem(\"transactions\", JSON.stringify(updated));\r\n      return updated;\r\n    });\r\n\r\n    callback()\r\n      .then((data: LeaderboardResponse) => {\r\n        setTransactions(prev => {\r\n          const updatedTransactions = prev.map(tx =>\r\n            tx.id === id && tx.type === type\r\n              ? { ...tx, link: data?.url || \"Error\", date: Date.now() }\r\n              : tx\r\n          );\r\n          localStorage.setItem(\"transactions\", JSON.stringify(updatedTransactions));\r\n          return updatedTransactions;\r\n        });\r\n      })\r\n      .catch(() => {\r\n        setTransactions(prev => {\r\n          const updatedTransactions = prev.map(tx =>\r\n            tx.id === id && tx.type === type\r\n              ? { ...tx, link: \"Error\", date: Date.now() }\r\n              : tx\r\n          );\r\n          localStorage.setItem(\"transactions\", JSON.stringify(updatedTransactions));\r\n          return updatedTransactions;\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleMint = (killCount: number) => {\r\n    const transaction: Transaction = {\r\n      id: Date.now(),\r\n      type: `Mint: ${killCount}`,\r\n      link: \"Pending...\",\r\n      date: Date.now()\r\n    };\r\n\r\n    updateTransactions(transaction, () => import('../game/utils.ts').then(m => m.mint()));\r\n  };\r\n\r\n  const handleTotalScore = (score: number, isDead = false) => {\r\n    const transaction: Transaction = {\r\n      id: Date.now(),\r\n      type: isDead ? `Death: ${score}` : `Kill: ${score}`,\r\n      link: \"Pending...\",\r\n      date: Date.now()\r\n    };\r\n\r\n    updateTransactions(transaction, () => \r\n      import('../game/utils.ts').then(m => m.sendTransaction(score, isDead))\r\n    );\r\n  };\r\n\r\n  return {\r\n    transactions,\r\n    handleMint,\r\n    handleTotalScore\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}