{"ast":null,"code":"// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(response) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    request\n  } = options;\n  return {\n    ...response,\n    id: response.id ?? request?.id,\n    jsonrpc: response.jsonrpc ?? request.jsonrpc\n  };\n}\n/**\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::tip\n *\n * If you don't need the return type, you can omit the options entirely.\n *\n * ```ts twoslash\n * // @noErrors\n * import { RpcResponse } from 'ox'\n *\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\n *  .then((response) => response.json())\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\n *  .then(RpcResponse.parse) // [!code ++]\n * ```\n * :::\n *\n * @example\n * ### Raw Mode\n *\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n *\n * const response = RpcResponse.parse({}, {\n *   request,\n *   raw: true, // [!code hl]\n * })\n *\n * response.result\n * //       ^?\n *\n *\n * response.error\n * //       ^?\n *\n *\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function parse(response) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    raw = false\n  } = options;\n  const response_ = response;\n  if (raw) return response;\n  if (response_.error) {\n    const {\n      code\n    } = response_.error;\n    const JsonRpcError = (() => {\n      if (code === InternalError.code) return InternalError;\n      if (code === InvalidInputError.code) return InvalidInputError;\n      if (code === InvalidParamsError.code) return InvalidParamsError;\n      if (code === InvalidRequestError.code) return InvalidRequestError;\n      if (code === LimitExceededError.code) return LimitExceededError;\n      if (code === MethodNotFoundError.code) return MethodNotFoundError;\n      if (code === MethodNotSupportedError.code) return MethodNotSupportedError;\n      if (code === ParseError.code) return ParseError;\n      if (code === ResourceNotFoundError.code) return ResourceNotFoundError;\n      if (code === ResourceUnavailableError.code) return ResourceUnavailableError;\n      if (code === TransactionRejectedError.code) return TransactionRejectedError;\n      if (code === VersionNotSupportedError.code) return VersionNotSupportedError;\n      return BaseError;\n    })();\n    throw new JsonRpcError(response_.error);\n  }\n  return response_.result;\n}\n/** Thrown when a JSON-RPC error has occurred. */\nexport class BaseError extends Error {\n  constructor(errorObject) {\n    const {\n      code,\n      message,\n      data\n    } = errorObject;\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.BaseError'\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"data\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.code = code;\n    this.data = data;\n  }\n}\n/** Thrown when the input to a JSON-RPC method is invalid. */\nexport class InvalidInputError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Missing or invalid parameters.',\n      ...parameters,\n      code: InvalidInputError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32000\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidInputError'\n    });\n  }\n}\nObject.defineProperty(InvalidInputError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32000\n});\n/** Thrown when a JSON-RPC resource is not found. */\nexport class ResourceNotFoundError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Requested resource not found.',\n      ...parameters,\n      code: ResourceNotFoundError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32001\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ResourceNotFoundError'\n    });\n  }\n}\nObject.defineProperty(ResourceNotFoundError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32001\n});\n/** Thrown when a JSON-RPC resource is unavailable. */\nexport class ResourceUnavailableError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Requested resource not available.',\n      ...parameters,\n      code: ResourceUnavailableError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32002\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ResourceUnavailableError'\n    });\n  }\n}\nObject.defineProperty(ResourceUnavailableError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32002\n});\n/** Thrown when a JSON-RPC transaction is rejected. */\nexport class TransactionRejectedError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Transaction creation failed.',\n      ...parameters,\n      code: TransactionRejectedError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32003\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.TransactionRejectedError'\n    });\n  }\n}\nObject.defineProperty(TransactionRejectedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32003\n});\n/** Thrown when a JSON-RPC method is not supported. */\nexport class MethodNotSupportedError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Method is not implemented.',\n      ...parameters,\n      code: MethodNotSupportedError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32004\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.MethodNotSupportedError'\n    });\n  }\n}\nObject.defineProperty(MethodNotSupportedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32004\n});\n/** Thrown when a rate-limit is exceeded. */\nexport class LimitExceededError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Rate limit exceeded.',\n      ...parameters,\n      code: LimitExceededError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32005\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.LimitExceededError'\n    });\n  }\n}\nObject.defineProperty(LimitExceededError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32005\n});\n/** Thrown when a JSON-RPC version is not supported. */\nexport class VersionNotSupportedError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'JSON-RPC version not supported.',\n      ...parameters,\n      code: VersionNotSupportedError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32006\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.VersionNotSupportedError'\n    });\n  }\n}\nObject.defineProperty(VersionNotSupportedError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32006\n});\n/** Thrown when a JSON-RPC request is invalid. */\nexport class InvalidRequestError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Input is not a valid JSON-RPC request.',\n      ...parameters,\n      code: InvalidRequestError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32600\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidRequestError'\n    });\n  }\n}\nObject.defineProperty(InvalidRequestError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32600\n});\n/** Thrown when a JSON-RPC method is not found. */\nexport class MethodNotFoundError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Method does not exist.',\n      ...parameters,\n      code: MethodNotFoundError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32601\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.MethodNotFoundError'\n    });\n  }\n}\nObject.defineProperty(MethodNotFoundError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32601\n});\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\nexport class InvalidParamsError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Invalid method parameters.',\n      ...parameters,\n      code: InvalidParamsError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32602\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InvalidParamsError'\n    });\n  }\n}\nObject.defineProperty(InvalidParamsError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32602\n});\n/** Thrown when an internal JSON-RPC error has occurred. */\nexport class InternalError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Internal JSON-RPC error.',\n      ...parameters,\n      code: InternalError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32603\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.InternalErrorError'\n    });\n  }\n}\nObject.defineProperty(InternalError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32603\n});\n/** Thrown when a JSON-RPC response is invalid. */\nexport class ParseError extends BaseError {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      message: 'Failed to parse JSON-RPC response.',\n      ...parameters,\n      code: ParseError.code\n    });\n    Object.defineProperty(this, \"code\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -32700\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 'RpcResponse.ParseError'\n    });\n  }\n}\nObject.defineProperty(ParseError, \"code\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: -32700\n});","map":{"version":3,"names":["from","response","options","arguments","length","undefined","request","id","jsonrpc","parse","raw","response_","error","code","JsonRpcError","InternalError","InvalidInputError","InvalidParamsError","InvalidRequestError","LimitExceededError","MethodNotFoundError","MethodNotSupportedError","ParseError","ResourceNotFoundError","ResourceUnavailableError","TransactionRejectedError","VersionNotSupportedError","BaseError","result","Error","constructor","errorObject","message","data","Object","defineProperty","parameters"],"sources":["/home/nick/Desktop/Monagaynanimas_Neynar/node_modules/@farcaster/frame-sdk/node_modules/ox/core/RpcResponse.ts"],"sourcesContent":["import type { Errors, RpcRequest } from '../index.js'\nimport type {\n  Compute,\n  IsNarrowable,\n  OneOf,\n  UnionPartialBy,\n} from './internal/types.js'\n\n/** A JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object). */\nexport type RpcResponse<\n  result = unknown,\n  error extends ErrorObject = ErrorObject,\n> = Compute<\n  {\n    id: number\n    jsonrpc: '2.0'\n  } & OneOf<{ result: result } | { error: error }>\n>\n\n/** JSON-RPC error object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#error_object). */\nexport type ErrorObject = {\n  code: number\n  message: string\n  data?: unknown | undefined\n}\n\n/**\n * A type-safe interface to instantiate a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object).\n *\n * @example\n * ### Instantiating a Response Object\n *\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const response = RpcResponse.from({\n *   id: 0,\n *   jsonrpc: '2.0',\n *   result: '0x69420',\n * })\n * ```\n *\n * @example\n * ### Type-safe Instantiation\n *\n * If you have a JSON-RPC request object, you can use it to strongly-type the response. If a `request` is provided,\n * then the `id` and `jsonrpc` properties will be overridden with the values from the request.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const request = RpcRequest.from({ id: 0, method: 'eth_blockNumber' })\n *\n * const response = RpcResponse.from(\n *   { result: '0x69420' },\n *   { request },\n * )\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function from<\n  request extends RpcRequest.RpcRequest | undefined = undefined,\n  const response =\n    | (request extends RpcRequest.RpcRequest\n        ? request['_returnType']\n        : RpcResponse)\n    | unknown,\n>(\n  response: from.Response<request, response>,\n  options?: from.Options<request>,\n): Compute<from.ReturnType<response>>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(response: RpcResponse, options: any = {}): RpcResponse {\n  const { request } = options\n  return {\n    ...response,\n    id: response.id ?? request?.id,\n    jsonrpc: response.jsonrpc ?? request.jsonrpc,\n  }\n}\n\nexport declare namespace from {\n  type Response<\n    request extends RpcRequest.RpcRequest | undefined = undefined,\n    response = unknown,\n  > = response &\n    (request extends RpcRequest.RpcRequest\n      ? UnionPartialBy<RpcResponse<request['_returnType']>, 'id' | 'jsonrpc'>\n      : RpcResponse)\n\n  type Options<\n    request extends RpcRequest.RpcRequest | undefined =\n      | RpcRequest.RpcRequest\n      | undefined,\n  > = {\n    request?: request | RpcRequest.RpcRequest | undefined\n  }\n\n  type ReturnType<response> = IsNarrowable<response, RpcResponse> extends true\n    ? RpcResponse\n    : response & Readonly<{ id: number; jsonrpc: '2.0' }>\n}\n\n/**\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::tip\n *\n * If you don't need the return type, you can omit the options entirely.\n *\n * ```ts twoslash\n * // @noErrors\n * import { RpcResponse } from 'ox'\n *\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\n *  .then((response) => response.json())\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\n *  .then(RpcResponse.parse) // [!code ++]\n * ```\n * :::\n *\n * @example\n * ### Raw Mode\n *\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n *\n * const response = RpcResponse.parse({}, {\n *   request,\n *   raw: true, // [!code hl]\n * })\n *\n * response.result\n * //       ^?\n *\n *\n * response.error\n * //       ^?\n *\n *\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function parse<\n  const response extends RpcResponse | unknown,\n  returnType,\n  raw extends boolean = false,\n>(\n  response: response,\n  options: parse.Options<returnType, raw> = {},\n): parse.ReturnType<\n  unknown extends response\n    ? returnType\n    : response extends RpcResponse\n      ? response extends { result: infer result }\n        ? result\n        : never\n      : returnType,\n  raw\n> {\n  const { raw = false } = options\n  const response_ = response as RpcResponse\n  if (raw) return response as never\n  if (response_.error) {\n    const { code } = response_.error\n    const JsonRpcError = (() => {\n      if (code === InternalError.code) return InternalError\n      if (code === InvalidInputError.code) return InvalidInputError\n      if (code === InvalidParamsError.code) return InvalidParamsError\n      if (code === InvalidRequestError.code) return InvalidRequestError\n      if (code === LimitExceededError.code) return LimitExceededError\n      if (code === MethodNotFoundError.code) return MethodNotFoundError\n      if (code === MethodNotSupportedError.code) return MethodNotSupportedError\n      if (code === ParseError.code) return ParseError\n      if (code === ResourceNotFoundError.code) return ResourceNotFoundError\n      if (code === ResourceUnavailableError.code)\n        return ResourceUnavailableError\n      if (code === TransactionRejectedError.code)\n        return TransactionRejectedError\n      if (code === VersionNotSupportedError.code)\n        return VersionNotSupportedError\n      return BaseError\n    })()\n    throw new JsonRpcError(response_.error)\n  }\n  return response_.result as never\n}\n\nexport declare namespace parse {\n  type Options<returnType, raw extends boolean = false> = {\n    /**\n     * JSON-RPC Method that was used to make the request. Used for typing the response.\n     */\n    request?:\n      | {\n          _returnType: returnType\n        }\n      | RpcRequest.RpcRequest\n      | undefined\n    /**\n     * Enables raw mode – responses will return an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n     *\n     * - `true`: a JSON-RPC response object will be returned with `result` and `error` properties.\n     * - `false`: the JSON-RPC response object's `result` property will be returned directly, and JSON-RPC Errors will be thrown.\n     *\n     * @default false\n     */\n    raw?: raw | boolean | undefined\n  }\n\n  type ReturnType<returnType, raw extends boolean = false> = Compute<\n    raw extends true ? RpcResponse<returnType> : returnType\n  >\n\n  type ErrorType =\n    | ParseError\n    | InvalidInputError\n    | ResourceNotFoundError\n    | ResourceUnavailableError\n    | TransactionRejectedError\n    | MethodNotSupportedError\n    | LimitExceededError\n    | VersionNotSupportedError\n    | InvalidRequestError\n    | MethodNotFoundError\n    | InvalidParamsError\n    | InternalError\n    | BaseErrorType\n    | Errors.GlobalErrorType\n}\n\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\n\n/** Thrown when a JSON-RPC error has occurred. */\nexport class BaseError extends Error {\n  override name = 'RpcResponse.BaseError'\n\n  readonly code: number\n  readonly data?: unknown | undefined\n\n  constructor(errorObject: ErrorObject) {\n    const { code, message, data } = errorObject\n    super(message)\n    this.code = code\n    this.data = data\n  }\n}\n\n/** Thrown when the input to a JSON-RPC method is invalid. */\nexport class InvalidInputError extends BaseError {\n  static readonly code = -32000\n  override readonly code = -32000\n  override readonly name = 'RpcResponse.InvalidInputError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Missing or invalid parameters.',\n      ...parameters,\n      code: InvalidInputError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC resource is not found. */\nexport class ResourceNotFoundError extends BaseError {\n  static readonly code = -32001\n  override readonly code = -32001\n  override readonly name = 'RpcResponse.ResourceNotFoundError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Requested resource not found.',\n      ...parameters,\n      code: ResourceNotFoundError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC resource is unavailable. */\nexport class ResourceUnavailableError extends BaseError {\n  static readonly code = -32002\n  override readonly code = -32002\n  override readonly name = 'RpcResponse.ResourceUnavailableError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Requested resource not available.',\n      ...parameters,\n      code: ResourceUnavailableError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC transaction is rejected. */\nexport class TransactionRejectedError extends BaseError {\n  static readonly code = -32003\n  override readonly code = -32003\n  override readonly name = 'RpcResponse.TransactionRejectedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Transaction creation failed.',\n      ...parameters,\n      code: TransactionRejectedError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC method is not supported. */\nexport class MethodNotSupportedError extends BaseError {\n  static readonly code = -32004\n  override readonly code = -32004\n  override readonly name = 'RpcResponse.MethodNotSupportedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Method is not implemented.',\n      ...parameters,\n      code: MethodNotSupportedError.code,\n    })\n  }\n}\n\n/** Thrown when a rate-limit is exceeded. */\nexport class LimitExceededError extends BaseError {\n  static readonly code = -32005\n  override readonly code = -32005\n  override readonly name = 'RpcResponse.LimitExceededError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Rate limit exceeded.',\n      ...parameters,\n      code: LimitExceededError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC version is not supported. */\nexport class VersionNotSupportedError extends BaseError {\n  static readonly code = -32006\n  override readonly code = -32006\n  override readonly name = 'RpcResponse.VersionNotSupportedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'JSON-RPC version not supported.',\n      ...parameters,\n      code: VersionNotSupportedError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC request is invalid. */\nexport class InvalidRequestError extends BaseError {\n  static readonly code = -32600\n  override readonly code = -32600\n  override readonly name = 'RpcResponse.InvalidRequestError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Input is not a valid JSON-RPC request.',\n      ...parameters,\n      code: InvalidRequestError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC method is not found. */\nexport class MethodNotFoundError extends BaseError {\n  static readonly code = -32601\n  override readonly code = -32601\n  override readonly name = 'RpcResponse.MethodNotFoundError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Method does not exist.',\n      ...parameters,\n      code: MethodNotFoundError.code,\n    })\n  }\n}\n\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\nexport class InvalidParamsError extends BaseError {\n  static readonly code = -32602\n  override readonly code = -32602\n  override readonly name = 'RpcResponse.InvalidParamsError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Invalid method parameters.',\n      ...parameters,\n      code: InvalidParamsError.code,\n    })\n  }\n}\n\n/** Thrown when an internal JSON-RPC error has occurred. */\nexport class InternalError extends BaseError {\n  static readonly code = -32603\n  override readonly code = -32603\n  override readonly name = 'RpcResponse.InternalErrorError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Internal JSON-RPC error.',\n      ...parameters,\n      code: InternalError.code,\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC response is invalid. */\nexport class ParseError extends BaseError {\n  static readonly code = -32700\n  override readonly code = -32700\n  override readonly name = 'RpcResponse.ParseError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      message: 'Failed to parse JSON-RPC response.',\n      ...parameters,\n      code: ParseError.code,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}